Logic


Notes: 
- all images, buttons and components should be a Jlabel
- new(0) ready(25) run(50) terminate(100)
- the length of unique characters in a word should be the basis of map movement  
- if correct answer 

1. call newGame()
2. Set game Information
	- lives
	- incorrectGuesses
3. Set game background background 
4. Show maps label
 	- logic for showing the map image
5. Set buttons jlabel/component
	 - add the action listeners for each letter button here. maybe add a method
6. Add game GUI to game panel
7. Set the game panel gui components to visible
8. Get word from a text file
	- store words in an array (new line serves as a line break for reader)
	- from that array, randomly get a number an choose a word. Mark that word as unavailable
	- get the word and store word into an array of characters again to be used later for checking whether an entered character
	- for each character on that word, replace with a blank line (_____) should be returned by a method 
9. Display the word blanks on the space allotted



Now adding the button listeners in action performed
- if button press is from any of the keys, then do the following
	* check if word input contains characters from the selected word in the text file. 
		if it contains a character then:
			- change image button to selected but pink
			- disable button
			- update the blank ____ display
			- 
		if it doesnt contain:
			- change image button to select but red 
			- disable button
			- minus 1 from lives
			- decrement lives by 1, update the memory pictures component
	* after each button click see the user status
		- if lives < 1 then display the game over panel. GAME OVER
		
	
